# workflow:
#   rules:
#   - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
#     when: never
#   - when: always

image: maven:3.8.6-jdk-11



stages:
# - ".pre"
# - pull
- build
# - remove-d
# - build-image
- test
# - fuzz
# - dast
# - performance
# - ".post"
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml 
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
# - template: Security/Coverage-Fuzzing.gitlab-ci.yml


# ".pre":
#   stage: ".pre"
#   script:
#   - echo "pre stage"
#   tags:
#   - java_deploy

# pull-code:
#   stage: pull
#   only:
#   - main
#   tags:
#   - java_deploy
#   script:
#   - echo "preparing data and dependencies..."
#   - pwd
#   - ls


  

# dast:
#   tags:
#   - java_deploy
#   script:
#   - echo "Test OK"

# .post:
#   stage: .post
#   script: 
#     - echo "post stage"
#   tags:
#     - java_deploy        

build-code:
  stage: build
  only:
  - main
  tags:
  - aktest
  before_script:
  - echo "=======change permission ======="
  - chmod +x maveninstall.sh
  script:
  - echo "==== Project Building Started ====="
  - "./maveninstall.sh"
  - echo "code build Successfull..."
  - pwd
  when: on_success
  artifacts:
    paths:
    - target/*.war
    expire_in: 15 days

# remove-old-docker:
#   stage: remove-d
#   only:
#   - main
#   tags:
#   - java_deploy
#   before_script:
#   - echo "change permission of dockerrmf.sh"
#   - chmod +x dockerrmf.sh
#   script:
#   - echo "Starting remove old docker image and container"
#   - "./dockerrmf.sh"
#   - echo "Removed all docker image and container"

# build-docker-image:
#   stage: build-image
#   only:
#   - main
#   tags:
#   - java_deploy
#   needs:
#   - build-code
#   before_script:
#   - chmod +x dockercmd.sh
#   - echo "permission change"
#   script:
#   - "./dockercmd.sh"
#   - echo "====Build And Deploy successfull.... ====="


sast:
  stage: test
  tags:
    - aktest
  artifacts:
   name: sast
   paths:
     - gl-sast-report.json
   reports:
     sast: gl-sast-report.json
   when: always
  script:
    - echo "testing the SAST job"

    
spotbugs-sast:
  extends: .sast-analyzer
  image:
    name: "$SAST_ANALYZER_IMAGE"
  tags:
  - aktest
  variables:
    SAST_ANALYZER_IMAGE_TAG: 3
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/spotbugs:$SAST_ANALYZER_IMAGE_TAG"
  rules:
    - if: $SAST_EXCLUDED_ANALYZERS =~ /spotbugs/
      when: never
    - if: $SAST_EXPERIMENTAL_FEATURES == 'true'
      exists:
        - '**/AndroidManifest.xml'
      when: never
    - if: $SAST_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.xml'
        - '**/*.jsp'
  artifacts:
   name: spotbug
   paths:
     - gl-spotbug-report.json
   reports:
     sast: gl-spotbug-report.json


code_quality:
  stage: test
  artifacts:
    paths: [gl-code-quality-report.json] 




gemnasium-maven-dependency_scanning:
  stage: test
  tags:
    - aktest
  artifacts:
   name: maven-dependency_scanning
   paths:
     - gl-sbom-*.cdx.json
   reports:
     maven-dependency_scanning: gl-sbom-*.cdx.json
   when: always

# variables:
#   IMAGE: registry.gitlab.com/fineshift/java_deploy:latest
#   DOCKERFILE_PATH: "$CI_PROJECT_DIR/Dockerfile"






  
  
